#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <unistd.h>
#include <netinet/in.h>
#include <netinet/ether.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <net/if.h>
#include <arpa/inet.h>
#include <pthread.h>

#include "cgicommon.h"
#include "html-lib.h"
#include "cgi-lib.h"
#include "string-lib.h"
#include "ini.h"
#include "ucfg_lib.h"

static pthread_cond_t cgi_cond  = PTHREAD_COND_INITIALIZER;
static pthread_mutex_t cgi_lock  = PTHREAD_MUTEX_INITIALIZER;

char langbuf[] = {"aabbcc"};

#if 0
{"\
info:[\{\
userid:\"admin\",\
name:\"admin\",\
},\
{\
userid:\"administrator\",\
name:\"administrator\",\
}\
]\
"};
#endif

static void updateLanguageConf()
{
	system ("ucfg get config language > /tmp/language.conf");
}

static int GetLanguage(llist entries, int set)
{


#if 0

if (set == 0)
{
	CGI_XML_VALUE("LANGUAGE", langbuf);
} 

CGI_XML_VALUE("LANGUAGE", get_value);

#elif 1


	char ini_file[256];
	char get_value[LENGTH_INI_KEY_AND_VALUE] = {0,};
	char *key;
	int ret;
	char tmp[256]="";
	
	
	if (set == 0)
	{
		sprintf(ini_file, "/tmp/language.conf");
		key = "ENABLE";
		if (0 > GetPrivateProfileString(
					"", // No section
					key,
					"0",
					get_value,
					sizeof(get_value) - 1,
					ini_file)) {
			return -1;
		}
		CGI_XML_VALUE("LANGUAGE", get_value);
	

	//	memset(get_value,0,sizeof(get_value));
	}
#else

if (set == 0)
{
	CGI_XML_VALUE("LANGUAGE", get_value);
}


#endif

	return 0;
}	


#if 1
static int SetStatus(llist entries, int set)
{
	char *val;
	val = cgi_val(entries, "LANG");
	write_ucfg_xml(CONF_BLK, "/language/ENABLE", val);
	updateLanguageConf();
	return 0;
}

static int GetStatus(llist entries, int set)
{
	char cmd_str[256];
	char ini_file[256];
	char get_value[LENGTH_INI_KEY_AND_VALUE] = {0,};
	char *key;
	char ipaddress[32];
	char val_set[32];
	char *val;
	
	if (set == 0)
	{
		sprintf(ini_file, "/tmp/language.conf");
		key = "ENABLE";
		if (0 > GetPrivateProfileString(
					"", // No section
					key,
					"0",
					get_value,
					sizeof(get_value) - 1,
					ini_file)) {
			return -1;
		}
		
	CGI_XML_VALUE("LANGUAGE", get_value);
	}
	return 0;
}



#endif


int main()
{
		llist entries;
		int ret = 0;
		int init_ucfg_ret = -1;
		char* command;
		
		list_create(&entries);
		CGI_XML_BEGIN();
		init_ucfg_ret = init_ucfg();
		if(init_ucfg_ret < 0){
			CGI_XML_VALUE("Error", "%s", "init_ucfg Fail");
			goto out;
		}
	
		ret = read_cgi_input(&entries);
		if (ret)
		{
			command = cgi_val(entries, CGI_REQUEST_COMMAND);
			if (command == NULL)
			{
				CGI_XML_VALUE("Error", "%s", "NoCommand");
			}
			else if (!strcmp(command, "Language"))
			{
				pthread_mutex_lock(&cgi_lock);
	
				GetLanguage(entries, 0);
				pthread_mutex_unlock(&cgi_lock);
	
			}
#if 1			
			else if (!strcmp(command, "GetLanguageAllSetting"))
			{
				pthread_mutex_lock(&cgi_lock);
		
				GetStatus(entries, 0);

				pthread_mutex_unlock(&cgi_lock);
		
			}

#endif			
			else if (!strcmp(command, "SetlanguageEnable") )
			{
				SetStatus(entries, 0);
			}
			else
			{
				CGI_XML_VALUE("Error", "%s", "CGIabcd Unknown Command");
			}
		}
	
	out:
		if(init_ucfg_ret == 0)
			deinit_ucfg();
		CGI_XML_END();
		list_clear(&entries);
		
		pthread_mutex_destroy(&cgi_lock);
		pthread_cond_destroy(&cgi_cond);
		
		return 0;
}


